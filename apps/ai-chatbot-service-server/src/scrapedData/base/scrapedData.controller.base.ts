/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScrapedDataService } from "../scrapedData.service";
import { ScrapedDataCreateInput } from "./ScrapedDataCreateInput";
import { ScrapedData } from "./ScrapedData";
import { ScrapedDataFindManyArgs } from "./ScrapedDataFindManyArgs";
import { ScrapedDataWhereUniqueInput } from "./ScrapedDataWhereUniqueInput";
import { ScrapedDataUpdateInput } from "./ScrapedDataUpdateInput";

export class ScrapedDataControllerBase {
  constructor(protected readonly service: ScrapedDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScrapedData })
  async createScrapedData(
    @common.Body() data: ScrapedDataCreateInput
  ): Promise<ScrapedData> {
    return await this.service.createScrapedData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScrapedData] })
  @ApiNestedQuery(ScrapedDataFindManyArgs)
  async scrapedDataItems(
    @common.Req() request: Request
  ): Promise<ScrapedData[]> {
    const args = plainToClass(ScrapedDataFindManyArgs, request.query);
    return this.service.scrapedDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScrapedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scrapedData(
    @common.Param() params: ScrapedDataWhereUniqueInput
  ): Promise<ScrapedData | null> {
    const result = await this.service.scrapedData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScrapedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScrapedData(
    @common.Param() params: ScrapedDataWhereUniqueInput,
    @common.Body() data: ScrapedDataUpdateInput
  ): Promise<ScrapedData | null> {
    try {
      return await this.service.updateScrapedData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScrapedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScrapedData(
    @common.Param() params: ScrapedDataWhereUniqueInput
  ): Promise<ScrapedData | null> {
    try {
      return await this.service.deleteScrapedData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
