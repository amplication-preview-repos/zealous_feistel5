/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ScrapedData as PrismaScrapedData } from "@prisma/client";

export class ScrapedDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScrapedDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scrapedData.count(args);
  }

  async scrapedDataItems(
    args: Prisma.ScrapedDataFindManyArgs
  ): Promise<PrismaScrapedData[]> {
    return this.prisma.scrapedData.findMany(args);
  }
  async scrapedData(
    args: Prisma.ScrapedDataFindUniqueArgs
  ): Promise<PrismaScrapedData | null> {
    return this.prisma.scrapedData.findUnique(args);
  }
  async createScrapedData(
    args: Prisma.ScrapedDataCreateArgs
  ): Promise<PrismaScrapedData> {
    return this.prisma.scrapedData.create(args);
  }
  async updateScrapedData(
    args: Prisma.ScrapedDataUpdateArgs
  ): Promise<PrismaScrapedData> {
    return this.prisma.scrapedData.update(args);
  }
  async deleteScrapedData(
    args: Prisma.ScrapedDataDeleteArgs
  ): Promise<PrismaScrapedData> {
    return this.prisma.scrapedData.delete(args);
  }
}
