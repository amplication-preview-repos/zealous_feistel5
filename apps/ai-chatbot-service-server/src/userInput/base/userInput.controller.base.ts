/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserInputService } from "../userInput.service";
import { UserInputCreateInput } from "./UserInputCreateInput";
import { UserInput } from "./UserInput";
import { UserInputFindManyArgs } from "./UserInputFindManyArgs";
import { UserInputWhereUniqueInput } from "./UserInputWhereUniqueInput";
import { UserInputUpdateInput } from "./UserInputUpdateInput";

export class UserInputControllerBase {
  constructor(protected readonly service: UserInputService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserInput })
  async createUserInput(
    @common.Body() data: UserInputCreateInput
  ): Promise<UserInput> {
    return await this.service.createUserInput({
      data: data,
      select: {
        createdAt: true,
        id: true,
        text: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserInput] })
  @ApiNestedQuery(UserInputFindManyArgs)
  async userInputs(@common.Req() request: Request): Promise<UserInput[]> {
    const args = plainToClass(UserInputFindManyArgs, request.query);
    return this.service.userInputs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        text: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userInput(
    @common.Param() params: UserInputWhereUniqueInput
  ): Promise<UserInput | null> {
    const result = await this.service.userInput({
      where: params,
      select: {
        createdAt: true,
        id: true,
        text: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserInput(
    @common.Param() params: UserInputWhereUniqueInput,
    @common.Body() data: UserInputUpdateInput
  ): Promise<UserInput | null> {
    try {
      return await this.service.updateUserInput({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          text: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserInput(
    @common.Param() params: UserInputWhereUniqueInput
  ): Promise<UserInput | null> {
    try {
      return await this.service.deleteUserInput({
        where: params,
        select: {
          createdAt: true,
          id: true,
          text: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
