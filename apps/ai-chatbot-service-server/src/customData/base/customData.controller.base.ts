/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomDataService } from "../customData.service";
import { CustomDataCreateInput } from "./CustomDataCreateInput";
import { CustomData } from "./CustomData";
import { CustomDataFindManyArgs } from "./CustomDataFindManyArgs";
import { CustomDataWhereUniqueInput } from "./CustomDataWhereUniqueInput";
import { CustomDataUpdateInput } from "./CustomDataUpdateInput";

export class CustomDataControllerBase {
  constructor(protected readonly service: CustomDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomData })
  async createCustomData(
    @common.Body() data: CustomDataCreateInput
  ): Promise<CustomData> {
    return await this.service.createCustomData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomData] })
  @ApiNestedQuery(CustomDataFindManyArgs)
  async customDataItems(@common.Req() request: Request): Promise<CustomData[]> {
    const args = plainToClass(CustomDataFindManyArgs, request.query);
    return this.service.customDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customData(
    @common.Param() params: CustomDataWhereUniqueInput
  ): Promise<CustomData | null> {
    const result = await this.service.customData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomData(
    @common.Param() params: CustomDataWhereUniqueInput,
    @common.Body() data: CustomDataUpdateInput
  ): Promise<CustomData | null> {
    try {
      return await this.service.updateCustomData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomData(
    @common.Param() params: CustomDataWhereUniqueInput
  ): Promise<CustomData | null> {
    try {
      return await this.service.deleteCustomData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
