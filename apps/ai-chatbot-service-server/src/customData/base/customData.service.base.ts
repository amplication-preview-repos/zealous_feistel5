/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CustomData as PrismaCustomData } from "@prisma/client";

export class CustomDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customData.count(args);
  }

  async customDataItems(
    args: Prisma.CustomDataFindManyArgs
  ): Promise<PrismaCustomData[]> {
    return this.prisma.customData.findMany(args);
  }
  async customData(
    args: Prisma.CustomDataFindUniqueArgs
  ): Promise<PrismaCustomData | null> {
    return this.prisma.customData.findUnique(args);
  }
  async createCustomData(
    args: Prisma.CustomDataCreateArgs
  ): Promise<PrismaCustomData> {
    return this.prisma.customData.create(args);
  }
  async updateCustomData(
    args: Prisma.CustomDataUpdateArgs
  ): Promise<PrismaCustomData> {
    return this.prisma.customData.update(args);
  }
  async deleteCustomData(
    args: Prisma.CustomDataDeleteArgs
  ): Promise<PrismaCustomData> {
    return this.prisma.customData.delete(args);
  }
}
