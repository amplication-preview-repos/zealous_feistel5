/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BookDataService } from "../bookData.service";
import { BookDataCreateInput } from "./BookDataCreateInput";
import { BookData } from "./BookData";
import { BookDataFindManyArgs } from "./BookDataFindManyArgs";
import { BookDataWhereUniqueInput } from "./BookDataWhereUniqueInput";
import { BookDataUpdateInput } from "./BookDataUpdateInput";

export class BookDataControllerBase {
  constructor(protected readonly service: BookDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BookData })
  async createBookData(
    @common.Body() data: BookDataCreateInput
  ): Promise<BookData> {
    return await this.service.createBookData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BookData] })
  @ApiNestedQuery(BookDataFindManyArgs)
  async bookDataItems(@common.Req() request: Request): Promise<BookData[]> {
    const args = plainToClass(BookDataFindManyArgs, request.query);
    return this.service.bookDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BookData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bookData(
    @common.Param() params: BookDataWhereUniqueInput
  ): Promise<BookData | null> {
    const result = await this.service.bookData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BookData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBookData(
    @common.Param() params: BookDataWhereUniqueInput,
    @common.Body() data: BookDataUpdateInput
  ): Promise<BookData | null> {
    try {
      return await this.service.updateBookData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BookData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBookData(
    @common.Param() params: BookDataWhereUniqueInput
  ): Promise<BookData | null> {
    try {
      return await this.service.deleteBookData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
