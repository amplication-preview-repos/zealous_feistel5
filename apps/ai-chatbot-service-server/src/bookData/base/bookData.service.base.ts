/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BookData as PrismaBookData } from "@prisma/client";

export class BookDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BookDataCountArgs, "select">): Promise<number> {
    return this.prisma.bookData.count(args);
  }

  async bookDataItems(
    args: Prisma.BookDataFindManyArgs
  ): Promise<PrismaBookData[]> {
    return this.prisma.bookData.findMany(args);
  }
  async bookData(
    args: Prisma.BookDataFindUniqueArgs
  ): Promise<PrismaBookData | null> {
    return this.prisma.bookData.findUnique(args);
  }
  async createBookData(
    args: Prisma.BookDataCreateArgs
  ): Promise<PrismaBookData> {
    return this.prisma.bookData.create(args);
  }
  async updateBookData(
    args: Prisma.BookDataUpdateArgs
  ): Promise<PrismaBookData> {
    return this.prisma.bookData.update(args);
  }
  async deleteBookData(
    args: Prisma.BookDataDeleteArgs
  ): Promise<PrismaBookData> {
    return this.prisma.bookData.delete(args);
  }
}
